name: CI/CD Security Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install flake8 black
      - name: Lint with flake8
        run: flake8 src/
      - name: Format with black
        run: black --check src/

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Build package
        run: python setup.py sdist bdist_wheel

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Test with pytest
        run: pytest src/

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Scan for secrets
        uses: gitleaks/gitleaks-action@v2
      - name: SAST with Semgrep
        uses: returntocorp/semgrep-action@v1
      - name: Container scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'
          format: 'table'
          exit-code: '1'

  deploy:
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Deploy to EKS using Helm
        run: |
          helm upgrade --install my-app ./helm-charts \
            --namespace production \
            --set image.tag=${{ github.sha }} \
            --atomic \
            --timeout 5m \
            --wait

  smoke-test:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 2  # Garante execução rápida
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install requests pytest

      - name: Run smoke tests
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          pytest src/test_smoke.py -m smoke -v --tb=short

      - name: Rollback if failed
        if: failure()
        run: |
          echo "Iniciando rollback..."
          helm rollback my-app ./helm-charts --namespace production
          exit 1 # Força falha no job

  notify-success:
    runs-on: ubuntu-latest
    needs: smoke-test
    if: success()
    steps:
      - name: Send success notification to Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: >
            Pipeline CI/CD concluído com sucesso
            Repositório: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Execução: ${{ github.run_id }}
          SLACK_COLOR: "good"
          SLACK_TITLE: "CI/CD Success"
          SLACK_USERNAME: "GitHub Actions"

  notify-failure:
    runs-on: ubuntu-latest
    needs: smoke-test
    if: failure()
    steps:
      - name: Send failure notification to Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: >
            Pipeline CI/CD falhou
            Repositório: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Execução: ${{ github.run_id }}
            Job com falha: ${{ github.job }}
          SLACK_COLOR: "danger"
          SLACK_TITLE: "CI/CD Failure"
          SLACK_USERNAME: "GitHub Actions"
